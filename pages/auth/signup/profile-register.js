import Image from "next/image";
import { useEffect, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPen } from "@fortawesome/free-solid-svg-icons";
import { faTrashCan } from "@fortawesome/free-regular-svg-icons";
import { useRouter } from "next/router";
import { useMutation } from "@tanstack/react-query";
// import { uploadImage } from "@/pages/api/auth/cloudinary"; // ‚ùåpages/api/auth/cloudinary.jsÎäî API Route (ÏÑúÎ≤Ñ Ï†ÑÏö©) ÌååÏùºÏù¥Í≥†, Í∑∏Í±∏ importÌï¥ÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÏßÅÏ†ë ÏÇ¨Ïö©ÌïòÎ©¥ Ï†àÎåÄ Ïïà Îèº.‚ùå
import useUserStore from "@/zustand/userStore";
import { useForm } from "react-hook-form";
import { getSession, signIn } from "next-auth/react";
import useCurrentUserStore from "@/zustand/currentUserStore";

export default function ProfileRegisterPage() {
  const { currentUser } = useCurrentUserStore();
  const { location, username, birthdate, phoneNumber, setUser } =
    useUserStore(); // ‚úÖ Ïó¨Í∏∞ÏÑú ÎØ∏Î¶¨ Ìò∏Ï∂ú
  const [profileFile, setProfileFile] = useState(null); // ‚¨ÖÔ∏è Cloudinary ÏóÖÎ°úÎìúÏö© File Í∞ùÏ≤¥
  const [previewUrl, setPreviewUrl] = useState(null); // ÎØ∏Î¶¨Î≥¥Í∏∞Ïö©

  const router = useRouter();
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    if (previewUrl) {
      console.log("üîç ÎØ∏Î¶¨Î≥¥Í∏∞ URL ÏÉùÏÑ±Îê®:", previewUrl);
    }
  }, [previewUrl]);

  // 1Ô∏è‚É£ ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ UI
  const handleToggle = () => {
    setIsOpen(!isOpen);
  };

  const handleFileShow = (e) => {
    const file = e.target.files[0]; // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÖÎ°úÎìúÌïú ÌååÏùº

    if (file) {
      // Ïù¥Ï†Ñ URL Ï†ïÎ¶¨
      if (previewUrl) {
        URL.revokeObjectURL(previewUrl);
      }

      // ÏÉàÎ°úÏö¥ URL ÏÉùÏÑ±
      const newPreview = URL.createObjectURL(file); // Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÎØ∏Î¶¨Î≥¥Í∏∞ ÏúÑÌï¥ ÌååÏùº Í∞ùÏ≤¥Î•º URLÎ°ú Î≥ÄÌôò
      setPreviewUrl(newPreview); // Î∏åÎùºÏö∞Ï†ÄÏóê ÌëúÏãúÌï† URL
      setProfileFile(file); // Ïã§Ï†ú Cloudinary ÏóÖÎ°úÎìúÏö© (ÌååÏùº Ï†ÄÏû•)
    }
    setIsOpen(false);
  };

  const handleClearFile = () => {
    setPreviewUrl(null); // ‚Üê ‚úÖ Ïù¥Í±¥ ÏûàÏñ¥Ïïº ÎØ∏Î¶¨Î≥¥Í∏∞Í∞Ä ÏÇ¨ÎùºÏßê
    setProfileFile(null); // ‚Üê ‚úÖ Ïù¥Í±∞ÎèÑ ÌïÑÏöî! ÏóÖÎ°úÎìúÎ•º Ïïà ÌïòÍ≤å Îê®
    handleToggle();
  };

  // 2Ô∏è‚É£ useForm CODE
  const { register, handleSubmit } = useForm({
    defaultValues: { profile: null, nickname: "" },
  });

  // 3Ô∏è‚É£ Final API request
  const finallyRegister = useMutation({
    mutationFn: async (userInfo) => {
      const { nickname } = userInfo;

      // 1. Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
      // let imageUrl = null;
      // if (profileImage) {
      //   try {
      //     imageUrl = await uploadImage(profileImage);
      //   } catch (error) {
      //     throw new Error(
      //       "Image upload failed, signup was not completed. Please try again later."
      //     );
      //   }
      // }
      // üåüüåü ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑúÎäî ÏßÅÏ†ë cloudinaryÎ•º Ïì∞ÏßÄ ÏïäÍ≥†,
      // API RouteÏóê POST ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ∏Îã§. üåüüåü

      // 1. Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Î°úÏßÅÏóêÏÑ† profileFileÏùÑ ÏÇ¨Ïö©Ìï¥ÏÑú CloudinaryÏóê ÏóÖÎ°úÎìú:
      let imageUrl = null;
      if (profileFile) {
        const imageData = await profileFile.arrayBuffer();
        const base64Image = Buffer.from(imageData).toString("base64");
        const fileUri = `data:${profileFile.type};base64,${base64Image}`;

        const res = await fetch("/api/auth/cloudinary", {
          method: "POST",
          body: JSON.stringify({ image: fileUri }),
          headers: { "Content-Type": "application/json" },
        });

        const data = await res.json();
        imageUrl = data.url;
      }

      console.log("‚úÖ nickname:", nickname);
      console.log("‚úÖ imageUrl:", imageUrl);

      // 2. ÏµúÏ¢Ö user Í∞ùÏ≤¥ ÏôÑÏÑ± (Ïú†ÏßÄÎ≥¥ÏàòÏÑ±‚¨ÜÔ∏è)
      // üö´
      // setUser((prev) => ({
      //   ...prev,
      //   nickname,
      //   profileImage: imageUrl,
      // }));

      // ‚úÖ ÏúÑÏ≤òÎüº Ìï®ÏàòÌòï ÏóÖÎç∞Ïù¥Ìä∏ ÎßêÍ≥† ÏßÅÏ†ë Í∞ùÏ≤¥Î°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ∏∞
      setUser({
        location,
        username,
        birthdate,
        phoneNumber,
        nickname,
        profileImage: imageUrl,
      });
      const finalUser = useUserStore.getState().getUser();
      console.log("üíøÏÑúÎ≤ÑÎ°ú Î≥¥ÎÇº user: ", finalUser);

      // 3. ÌöåÏõêÍ∞ÄÏûÖ API ÏöîÏ≤≠ => DBÏóê Ìï¥Îãπ Ïú†Ï†ÄÎç∞Ïù¥ÌÑ∞ Ï†ÄÏû•!
      const resSignup = await fetch("/api/auth/signup", {
        method: "POST",
        body: JSON.stringify(finalUser),
        headers: { "Content-Type": "application/json" },
      });

      // üí•üí•res.json() Ìò∏Ï∂úÏù¥ Î¨¥Ï°∞Í±¥ res.okÎ≥¥Îã§ Î®ºÏ†Ä ÏôÄÏïº Ìï®üí•üí•
      // üñçÔ∏èÏù¥Ïú†: ÏÑúÎ≤ÑÍ∞Ä { message: "User exists already!" }Î°ú ÏùëÎãµÌñàÏñ¥ÎèÑ Í∑∏Í±∏ .json()ÏúºÎ°ú Í∫ºÎÇ¥Í∏∞ Ï†ÑÏóê ÏóêÎü¨Î•º ÎçòÏ†∏Î≤ÑÎ†§ÏÑú err.messageÎäî ÌïòÎìúÏΩîÎî©Îêú Î©îÏãúÏßÄ("ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®")Î∞ñÏóê Ïïà ÎÇòÏôÄ.
      const dataSignup = await resSignup.json();

      if (!resSignup.ok) {
        throw new Error(dataSignup.message || "ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®");
      }

      return dataSignup.user; // ‚Üí onSuccessÎ°ú Ï†ÑÎã¨Îê®
    },
    onSuccess: async (createdUser) => {
      // 4. ÌöåÏõêÍ∞ÄÏûÖ Ïãú, ÏûêÎèô Î°úÍ∑∏Ïù∏ÎêòÎèÑÎ°ù Î°úÍ∑∏Ïù∏ API ÏöîÏ≤≠
      // signIn(): fetch()Ï≤òÎüº Response Í∞ùÏ≤¥(json Ìò∏Ï∂úÌï¥ÏÑú JSON Îç∞Ïù¥ÌÑ∞(body)Î•º ÌååÏã±Ìï¥Ïïº Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏñªÏùå)Î•º Î∞òÌôòÌïòÏßÄ ÏïäÍ≥†, ÏùºÎ∞ò JSÍ∞ùÏ≤¥Î•º Î∞òÌôò -> json() Ìï®Ïàò ÏÇ¨Ïö© Ïì∞Î©¥ ÏïàÎê®.
      // ex) {ok: true, status: 200, url:"/api/auth/callback/credentials?callbackUrl=..."}
      const resLogin = await signIn("phoneLogin", {
        redirect: false,
        username: createdUser.username,
        phoneNumber: createdUser.phoneNumber,
        // callbackUrl: "/profile", => redirect: trueÏùº Îïå, Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µÌïòÎ©¥ Ìï¥Îãπ UrlÎ°ú ÏûêÎèô Ïù¥Îèô (ÎßåÏïΩ redirect: falseÏù¥Î©¥ callbackUrl ÏûëÏÑ±Ìï¥ÎèÑ Ïù¥Îèô x)
      });

      if (!resLogin || !resLogin.ok) {
        console.error("ÏûêÎèô Î°úÍ∑∏Ïù∏ Ïã§Ìå®", resLogin);
        alert("ÏûêÎèô Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        return;
      }
      console.log("ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÏÑ±Í≥µ üòä", resLogin);

      // ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å Ïãú, ÏûÑÏãúÏ†ÄÏû•ÏÜå(useStore) Ï¥àÍ∏∞Ìôî
      useUserStore.getState().resetUser();

      // ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú, next-authÏùò sessionÏóê Ï†ÄÏû•Îêú Ïú†Ï†ÄÏ†ïÎ≥¥Î•º ÏòÅÍµ¨Ï†ÄÏû•ÏÜå(currentUserStore)Ïóê ÏÑ∏ÌåÖ
      // üìçgetSession(): ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©ÏûêÏùò ÏÑ∏ÏÖò Ï†ïÎ≥¥Î•º ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
      // üìçsession.user: [...nextauth].js ÌååÏùº ÎÇ¥ authorize()ÏóêÏÑú Î¶¨ÌÑ¥Ìïú Ïú†Ìö®Ìïú DB ÏÇ¨Ïö©Ïûê Í∞ùÏ≤¥ (signIn ÏÑ±Í≥µ Ïãú sessionÏóê ÏûêÎèôÏúºÎ°ú Ï†ÄÏû•ÎêòÍ∏∞ ÎïåÎ¨∏Ïóê Ïñ∏Ï†úÎì† getSession()ÏúºÎ°ú Í∫ºÎÇ¥Ïì∏ Ïàò ÏûàÏùå)
      let session = await getSession();

      if (!session) {
        await new Promise((r) => setTimeout(r, 300)); // 300ms ÎåÄÍ∏∞
        session = await getSession(); // Ïû¨ÏãúÎèÑ
      }
      useCurrentUserStore.getState().setCurrentUser(session.user); // ‚úÖ Î°úÍ∑∏Ïù∏ Ïú†Ï†Ä ÏÉÅÌÉú Ï†ÄÏû•
      console.log(currentUser, "Ïú†Ï†Ä ÏÑ∏ÏÖò: ", session.user); // React Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥ currentUser Í∞íÏùÄ Îã§Ïùå Î†åÎçîÎßÅ ÏÇ¨Ïù¥ÌÅ¥ÏóêÏÑúÏïº ÏóÖÎç∞Ïù¥Ìä∏Îêú Í∞íÏùÑ Î∞òÏòÅÌïòÍ∏∞ ÎïåÎ¨∏Ïóê Ïó¨Ï†ÑÌûà üí•currentUser === nullüí•

      // 5. ÌôàÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      router.push("/profile");
    },
    onError: (err) => {
      console.error(err);
      alert(err.message);
    },
  });

  return (
    <div className="max-w-[640px] mx-auto min-h-screen bg-[var(--color-bg)] flex flex-col gap-8 p-4">
      <header className="grid grid-cols-3 items-center justify-center mb-4 border-b border-[var(--color-grey-100)] pb-4">
        <button
          onClick={() => router.back()}
          type="button"
          className="relative w-[30px] aspect-square cursor-pointer"
        >
          <Image
            src="/icons/chevron-left.svg"
            alt="icon"
            fill
            className="cursor-pointer"
          />
        </button>
      </header>

      <form
        className="flex flex-col gap-10 flex-grow"
        onSubmit={handleSubmit(finallyRegister.mutate)}
      >
        <div className="flex flex-col gap-6">
          <label className="text-[2rem] font-bold">
            Finally, choose a name and photo to introduce yourself to your
            community.
          </label>

          <div
            id="fildupload_profile_img"
            className="relative mx-auto w-[100px] h-[100px]"
          >
            {previewUrl ? (
              <Image
                src={previewUrl}
                alt="ÌîÑÎ°úÌïÑÏÇ¨ÏßÑ ÎØ∏Î¶¨Î≥¥Í∏∞"
                fill
                className="w-full h-full border border-grey-20 rounded-full object-cover p-1"
              />
            ) : (
              <div className="w-full h-full bg-[url('/icons/profile-signup.svg')]"></div>
            )}

            <div
              className="absolute bottom-1 right-0 rounded-full border border-[var(--color-grey-400)] bg-white p-2 cursor-pointer"
              onClick={handleToggle}
            >
              <button
                type="button"
                className="w-[22px] h-[22px] relative bg-[url('/icons/camera-signup.svg')] bg-no-repeat bg-center flex justify-center items-center cursor-pointer"
              >
                {isOpen && (
                  <div className="absolute left-6 top-full mt-1 p-2 shadow rounded-lg flex flex-col gap-[8px] bg-white">
                    <label
                      className="flex items-center gap-[10px] p-2 pr-8 hover:bg-sky-100 rounded cursor-pointer"
                      htmlFor="attach"
                      onClick={(e) => e.stopPropagation()}
                    >
                      <FontAwesomeIcon icon={faPen} />
                      <span className="whitespace-nowrap">Îì±Î°ù</span>
                      <input
                        type="file"
                        id="attach"
                        accept="image/*"
                        className="hidden"
                        {...register("profileImage", {
                          onChange: handleFileShow,
                        })}
                      />
                    </label>
                    <div
                      className="flex items-center gap-[12px] p-2 hover:bg-sky-100 rounded cursor-pointer"
                      onClick={handleClearFile}
                    >
                      <FontAwesomeIcon icon={faTrashCan} />
                      <span className="whitespace-nowrap">ÏÇ≠Ï†ú</span>
                    </div>
                  </div>
                )}
              </button>
            </div>
          </div>
        </div>

        <div
          className={`border-2 border-[var(--color-grey-300)] focus-within:border-[var(--color-grey-500)] rounded-2xl px-2 cursor-pointer`}
        >
          <input
            type="text"
            placeholder="Nickname"
            className="inputUnset inputCustom"
            {...register("nickname", {
              required: "ÎãâÎÑ§ÏûÑÏùÄ ÌïÑÏàòÏûÖÎãàÎã§.",
              minLength: {
                value: 2,
                message: "2Í∏ÄÏûê Ïù¥ÏÉÅ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.",
              },
            })}
          />
        </div>

        <div className="mt-auto">
          <button
            type="submit"
            className="font-bold h-[4rem] bg-[var(--color-primary-500)] p-4 w-full rounded-lg text-white cursor-pointer hover:bg-[var(--color-primary-700)]"
          >
            Complete sign up
          </button>
        </div>
      </form>
    </div>
  );
}

// ‚úÖ Layout Ï†ÅÏö© Ïïà ÌïòÎèÑÎ°ù getLayout ÏÑ§Ï†ï
ProfileRegisterPage.getLayout = function noLayout(page) {
  return page; // Layout Ïïà ÏîåÏõÄ
};
