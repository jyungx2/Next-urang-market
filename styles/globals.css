@import "tailwindcss/preflight";
@tailwind utilities;
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
  font-size: 62.5%;
}

* {
  box-sizing: border-box;
}

/* @media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
} */

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  font-size: 1.6rem;
  line-height: 1.2;
}

img {
  max-width: 100%;
  vertical-align: top;
}

.container {
  background-color: var(--color-bg);
  min-height: 100vh;
  min-width: 640px;
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 28px;
}

body {
  --color-grey-50: #f5f5f5;
  --color-grey-100: #e9e9e9;
  --color-grey-200: #d9d9d9;
  --color-grey-300: #c4c4c4;
  --color-grey-400: #9d9d9d;
  --color-grey-500: #7b7b7b;
  --color-grey-600: #555555;
  --color-grey-700: #434343;
  --color-grey-800: #262626;

  --color-primary-50: #e2f3ff;
  --color-primary-100: #b7e0ff;
  --color-primary-200: #89cdfe;
  --color-primary-300: #59b8fc;
  --color-primary-400: #2fa9fc;
  --color-primary-500: #009afa;
  --color-primary-600: #008cec;
  --color-primary-700: #007ad9;
  --color-secondary-800: #0069c7;
  --color-secondary-900: #004ba8;

  --color-secondary-50: #e8fbef;
  --color-secondary-100: #c7f4d7;
  --color-secondary-200: #a3edbe;
  --color-secondary-300: #78e7a3;
  --color-secondary-400: #56df8e;
  --color-secondary-500: #30d77a;
  --color-secondary-600: #26c76f;
  --color-secondary-700: #18b361;
  --color-secondary-800: #0ca156;
  --color-secondary-900: #008040;

  --color-bg: #f7f7f7;
  --color-com-bg: #313030;
  --color-grey-bg: #f5f6f7;

  --color-success-100: #a2f0bc;
  --color-success-500: #12bd4b;

  --color-warning-100: #fcfac7;
  --color-warning-500: #f6dc43;

  --color-error-100: #f1acc9;
  --color-error-500: #a10c4a;

  --size-1: 0.25rem;
  --size-2: 0.5rem;
  --size-3: 0.75rem;
  --size-4: 1rem;
  --size-5: 1.25rem;
  --size-6: 1.6rem;
  --size-8: 2rem;
  --size-16: 4rem;
  --size-20: 5rem;
  --size-40: 10rem;

  margin: 0;
  color: #252525;
  background-color: white;
  font-family: "Roboto", sans-serif;
}

.custom-swiper .swiper-button-next {
  right: 10px; /* 버튼 위치 조정 */
  color: var(--color-grey-400);
}

.custom-swiper .swiper-button-prev {
  left: 10px; /* 버튼 위치 조정 */
  color: var(--color-grey-400);
}

.custom-swiper .swiper-pagination-bullet {
  background-color: var(--color-grey-500); /* 기본 색상 */
  opacity: 0.5; /* 비활성 상태 투명도 */
}

.custom-swiper .swiper-pagination-bullet-active {
  background-color: var(--color-grey-700); /* 활성 상태 색상 */
  opacity: 1; /* 활성 상태 투명도 */
}

.inputUnset,
.textareaUnset,
.buttonUnset {
  all: unset;
}

.textareaCustom {
  display: block;
  width: 100%;
  padding: 1rem;
  font-size: 1.4rem;
  box-sizing: border-box;
}

.checkboxCustom {
  position: absolute;
  pointer-events: none;
}

.inputCustom {
  display: block;
  width: 100%;
  height: 4rem;
  padding: 0 4px;
  box-sizing: border-box;
}

/* Webkit (Chrome, Safari) */
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

/* Firefox */
.scrollbar-hide {
  scrollbar-width: none;
}

/* Tiptap 편집기 사용시, placeholder는 가상요소로 스타일링 필수! */
/* ⬇️ Tiptap 기본 Placeholder 확장에서만 사용됨 (텍스트 기반 placeholder) */
/* .ProseMirror p.is-empty::before {
  content: attr(data-placeholder);
  white-space: pre-wrap;
  float: left;
  color: #9ca3af; 
  pointer-events: none;
  height: 0;
} */

/* ⬇️ 위 방법 대신, extension 폴더를 따로 만들어서 custom placeholder 관리 (단순 텍스트가 아닌, 링크요소 사용하기 위함 -> 실제 DOM 요소로 렌더링 필요) */
.custom-placeholder {
  color: #9ca3af;
  pointer-events: auto;
  line-height: 1.6;
  position: absolute;
  z-index: 0;
}

.custom-placeholder a {
  pointer-events: auto;
}

/* placeholder 텍스트를 클릭했을 때 파란색 테두리(=브라우저가 기본적으로 contenteditable 요소나 input 계열에 focus 상태일 때 적용하는 스타일)을 제거하기 위한 추가 스타일링 ... EditorContent는 내부적으로 <div contenteditable="true">이기 때문에, outline 적용됨..*/
/* .ProseMirror:focus {
  outline: none;
} */

/* 💥문제점: <EditorContent />에 TailwindCSS로 'focus:outline-none'을 적용했음에도 불구하고, 여전히 outline 없어지지 않음

🎯 예측원인: <EditorContent />는 내부적으로 <div class="ProseMirror">를 렌더링하기 때문에, 이렇게 className을 줘도 EditorContent 자체엔 적용되지만,
진짜 focus 되는 건 내부의 .ProseMirror div라서 우리가 준 class는 작동하지 않음. 
-> ✅ 두가지 해결방안 존재 */

/* 1. 위와 같이 global.css에 해당 스타일을 부여하여 전역적으로 모든 ProseMirror에 스타일이 먹히도록.. (tailwind 없이도 충분)  */

/* 2. editorProps.attributes.class로 직접 class 부여하기 */
/* Tailwind를 사용하는 프로젝트에서 더 선호되는 방식(클래스 기반으로 스타일을 관리하니까 Tailwind와 일관성 있게 맞출 수 있고, 전역 CSS 없이도 유지보수하기 좋음)  */

/* ⛔️ [contenteditable]:empty는 텍스트를 입력했다가 지우면 <br> 같은 게 남아서 진짜 empty가 아닌 상태로 처리돼서 placeholder가 다시 안 보이는 현상이 생김. => 불안정한 방식 => JS로 상태 추적 후 클래스 추가하는 방식(isEmpty 예약속성 이용)으로 가자 => community/post/new - index.js 참고 */
/* .textarea[contenteditable]:empty::before {
  content: attr(placeholder);
  color: var(--color-grey-400);
  pointer-events: none;
} */

/* React에서 isEmpty === true일 때만 'empty' 클래스를 수동으로 붙여서 표시 */
.textarea {
  position: relative;
  min-height: 80px;
  font-size: 1.4rem;
  outline: none;
  white-space: pre-wrap;
  margin-top: 0.5rem;
  padding: 0.5rem;
}

.textarea.empty::before {
  content: attr(placeholder);
  color: #aaa;
  pointer-events: none;
  display: block; /* 타이핑 후, 모든 입력값 지웠을 때, 줄바꿈 일으키는 요소 */
  position: absolute;
  top: 0.5rem;
  left: 0.5rem;
  white-space: pre-wrap;
}
